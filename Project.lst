Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/17/23 22:13:58
%proj6_fahnestd   (proj6_fahnestd.asm			     Page 1 - 1


				TITLE proj6_fahnestd   (proj6_fahnestd.asm)

				; Author: Devin Fahnestock
				; Last Modified: 3/11/2023
				; OSU email address: fahnestd@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6               Due Date: 3/19/2023
				; Description:  displays the numbers, their mean, and their sum after 
				;				the user inputs 10 positive or negative integers

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; (insert macro definitions here)

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Gets a string value from the user
				;
				; Receives:
				; prompt = prompt to display before reading the users input
				; output = the bytes read from the user
				; bytesread = amount of characters read
				;
				; returns: output = users input string
				; ---------------------------------------------------------------------------------

				mGetString MACRO prompt:REQ, output:REQ, bytesread
					push	eax
					push	ecx
					push	edx

					mDisplayString	prompt

					mov		ecx, BUFFER_SIZE
					mov		edx, output
					call	ReadString

					mov		bytesread, eax
					pop		edx
					pop		ecx
					pop		eax
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Displays a string
				;
				; Receives:
				; output = address of the string to write
				;
				; returns: none
				; ---------------------------------------------------------------------------------

				mDisplayString MACRO output:REQ
					push	edx

					cld
					mov		edx, output
					call	WriteString
					
					pop		edx
				ENDM

				; (insert constant definitions here)
 = 0000000C				BUFFER_SIZE EQU 12 ;12 is the maximum digits available for a signed int in decimal form including the (+) or (-)
 00000000			.data
				; (insert variable definitions here)

 00000000 54 68 69 73 20		intro1		BYTE	"This is project 6, Made by Devin Fahnestock",0
	   69 73 20 70 72
	   6F 6A 65 63 74
	   20 36 2C 20 4D
	   61 64 65 20 62
	   79 20 44 65 76
	   69 6E 20 46 61
	   68 6E 65 73 74
	   6F 63 6B 00
 0000002C 45 6E 74 65 72		intro2		BYTE	"Enter 10 numbers and I will show you the mean and sum.",0
	   20 31 30 20 6E
	   75 6D 62 65 72
	   73 20 61 6E 64
	   20 49 20 77 69
	   6C 6C 20 73 68
	   6F 77 20 79 6F
	   75 20 74 68 65
	   20 6D 65 61 6E
	   20 61 6E 64 20
	   73 75 6D 2E 00
 00000063 54 68 61 6E 6B		outro1		BYTE	"Thanks for using my program!",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 00
 00000080 48 65 72 65 20		msg1		BYTE	"Here is your numbers you entered:",0
	   69 73 20 79 6F
	   75 72 20 6E 75
	   6D 62 65 72 73
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 3A 00

 000000A2 48 65 72 65 20		msg2		BYTE	"Here is the sum: ",0
	   69 73 20 74 68
	   65 20 73 75 6D
	   3A 20 00
 000000B4 48 65 72 65 20		msg3		BYTE	"Here is the mean truncated to an integer: ",0
	   69 73 20 74 68
	   65 20 6D 65 61
	   6E 20 74 72 75
	   6E 63 61 74 65
	   64 20 74 6F 20
	   61 6E 20 69 6E
	   74 65 67 65 72
	   3A 20 00

 000000DF 45 6E 74 65 72		prompt		BYTE "Enter a number please: ",0
	   20 61 20 6E 75
	   6D 62 65 72 20
	   70 6C 65 61 73
	   65 3A 20 00
 000000F7 45 72 72 6F 72		errstr		BYTE "Error with input, try again!",0
	   20 77 69 74 68
	   20 69 6E 70 75
	   74 2C 20 74 72
	   79 20 61 67 61
	   69 6E 21 00
 00000114 2C 20 00			commastr	BYTE ", ",0

 00000117  0000000A [			asciiconv	BYTE 10 DUP(0)
	    00
	   ]
 00000121  0000000C [			userString	BYTE BUFFER_SIZE DUP(0)
	    00
	   ]
 0000012D  0000000A [			ints		SDWORD 10 DUP(0)
	    00000000
	   ]

 00000155 00000000			sum			DWORD 0
 00000159 00000000			mean		DWORD 0

 00000000			.code
 00000000			main PROC
				; (insert executable instructions here)

					;show intro
					mDisplayString OFFSET intro1
 00000000  52		     1		push	edx
 00000001  FC		     1		cld
 00000002  BA 00000000 R     1		mov		edx, OFFSET intro1
 00000007  E8 00000000 E     1		call	WriteString
 0000000C  5A		     1		pop		edx
 0000000D  E8 00000000 E		call	CrLf
					mDisplayString OFFSET intro2
 00000012  52		     1		push	edx
 00000013  FC		     1		cld
 00000014  BA 0000002C R     1		mov		edx, OFFSET intro2
 00000019  E8 00000000 E     1		call	WriteString
 0000001E  5A		     1		pop		edx
 0000001F  E8 00000000 E		call	CrLf
 00000024  E8 00000000 E		call	CrLf

 00000029  B8 0000012D R		mov		eax, OFFSET ints ;set the reference to ints array into eax
 0000002E  33 C9			xor		ecx, ecx

 00000030			_nextnum: ;loop for getting 10 numbers from user
 00000030  68 000000DF R		push	OFFSET prompt
 00000035  68 000000F7 R		push	OFFSET errstr
 0000003A  68 00000121 R		push	OFFSET userString
 0000003F  50				push	eax
 00000040  E8 000000CB			call	ReadVal
 00000045  8B 18			mov		ebx, [eax]
 00000047  01 1D 00000155 R		add		sum, ebx ;keep the sum while going
 0000004D  83 C0 04			add		eax, 4 ;add 4 to the array offset to reference the next array index
 00000050  41				inc		ecx
 00000051  83 F9 0A			cmp		ecx, 10
 00000054  7C DA			jl		_nextnum

 00000056  E8 00000000 E		call	CrLf
					mDisplayString OFFSET msg1
 0000005B  52		     1		push	edx
 0000005C  FC		     1		cld
 0000005D  BA 00000080 R     1		mov		edx, OFFSET msg1
 00000062  E8 00000000 E     1		call	WriteString
 00000067  5A		     1		pop		edx
					
 00000068  E8 00000000 E		call	CrLf

 0000006D  B8 0000012D R		mov		eax, OFFSET ints 
 00000072  33 C9			xor		ecx, ecx 
 00000074  EB 0D			jmp		_skip ;skips the comma the first time and therefore doesnt append a comma after the last value. 
					
					;values have been collected, now parse them back
 00000076			_nextval: ;loop to show the 10 numbers back
					mDisplayString OFFSET commastr
 00000076  52		     1		push	edx
 00000077  FC		     1		cld
 00000078  BA 00000114 R     1		mov		edx, OFFSET commastr
 0000007D  E8 00000000 E     1		call	WriteString
 00000082  5A		     1		pop		edx
 00000083			_skip:
 00000083  68 00000121 R		push	OFFSET userString
 00000088  50				push	eax
 00000089  E8 00000120			call	WriteVal
 0000008E  83 C0 04			add		eax, 4 ;add 4 to the array offset to reference the next array index
 00000091  41				inc		ecx
 00000092  83 F9 0A			cmp		ecx, 10
 00000095  7C DF			jl		_nextval

 00000097  E8 00000000 E		call	CrLf

					;show the sum

					mDisplayString OFFSET msg2
 0000009C  52		     1		push	edx
 0000009D  FC		     1		cld
 0000009E  BA 000000A2 R     1		mov		edx, OFFSET msg2
 000000A3  E8 00000000 E     1		call	WriteString
 000000A8  5A		     1		pop		edx
 000000A9  68 00000121 R		push	OFFSET userString
 000000AE  68 00000155 R		push	OFFSET sum
 000000B3  E8 000000F6			call	WriteVal

 000000B8  E8 00000000 E		call	CrLf

					;div sum by 10 and show to user as mean
 000000BD  33 D2			xor		edx, edx
 000000BF  BB 0000000A			mov		ebx, 10
 000000C4  A1 00000155 R		mov		eax, sum

 000000C9  99				cdq
 000000CA  F7 FB			idiv	ebx
 000000CC  A3 00000159 R		mov		mean, eax

					mDisplayString OFFSET msg3
 000000D1  52		     1		push	edx
 000000D2  FC		     1		cld
 000000D3  BA 000000B4 R     1		mov		edx, OFFSET msg3
 000000D8  E8 00000000 E     1		call	WriteString
 000000DD  5A		     1		pop		edx
 000000DE  68 00000121 R		push	OFFSET userString
 000000E3  68 00000159 R		push	OFFSET mean
 000000E8  E8 000000C1			call	WriteVal
 000000ED  E8 00000000 E		call	CrLf
 000000F2  E8 00000000 E		call	CrLf

					;say goodbye
					mDisplayString OFFSET outro1
 000000F7  52		     1		push	edx
 000000F8  FC		     1		cld
 000000F9  BA 00000063 R     1		mov		edx, OFFSET outro1
 000000FE  E8 00000000 E     1		call	WriteString
 00000103  5A		     1		pop		edx
 00000104  E8 00000000 E		call	CrLf

					Invoke ExitProcess,0	; exit to operating system
 00000109  6A 00	   *	    push   +000000000h
 0000010B  E8 00000000 E   *	    call   ExitProcess
 00000110			main ENDP

				; (insert additional procedures here)


				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Reads a string from the user and parses it into a signed DWORD, then writes the value to the output parameter
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives:
				; [ebp + 20] = address of the prompt to show the user when collecting input
				; [ebp + 16] = address of error string to show in case of an error
				; [ebp + 12] = address of a buffer string, for parsing the integer
				; [ebp + 8]  = the output address for the procedure to write the users integer to
				;
				; returns: Output parameter is the users integer
				; ---------------------------------------------------------------------------------

 00000110			ReadVal PROC
					LOCAL	isNeg : BYTE
					LOCAL	bytesread : DWORD
 00000110  55		   *	    push   ebp
 00000111  8B EC	   *	    mov    ebp, esp
 00000113  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000116  50				push	eax
 00000117  51				push	ecx

 00000118  C6 45 FF 00			mov		isNeg, 0

 0000011C  FC				cld ; clear the direction flag to prep

 0000011D			_retry:
					;get input
					mGetString	[ebp + 20], [ebp + 12], bytesread
 0000011D  50		     1		push	eax
 0000011E  51		     1		push	ecx
 0000011F  52		     1		push	edx
 00000120  52		     2		push	edx
 00000121  FC		     2		cld
 00000122  8B 55 14	     2		mov		edx, [ebp + 20]
 00000125  E8 00000000 E     2		call	WriteString
 0000012A  5A		     2		pop		edx
 0000012B  B9 0000000C	     1		mov		ecx, BUFFER_SIZE
 00000130  8B 55 0C	     1		mov		edx, [ebp + 12]
 00000133  E8 00000000 E     1		call	ReadString
 00000138  89 45 F8	     1		mov		bytesread, eax
 0000013B  5A		     1		pop		edx
 0000013C  59		     1		pop		ecx
 0000013D  58		     1		pop		eax
 0000013E  83 7D F8 0C			cmp		bytesread, 12 ;check if too many or too little input
 00000142  7F 4A			jg		_error
 00000144  83 7D F8 01			cmp		bytesread, 1
 00000148  7C 44			jl		_error 
 0000014A  8B 75 0C			mov		esi, [ebp + 12]
 0000014D  33 D2			xor		edx, edx
 0000014F  33 C0			xor		eax, eax
 00000151  8B F8			mov		edi, eax

 00000153  AC				lodsb ;load initial bit for checking signs
 00000154  3C 2D			cmp		al, '-'
 00000156  74 30			je		_negate  ;skip the first load after checking for neg (-)
 00000158  3C 2B			cmp		al, '+'
 0000015A  74 06			je		_nextint ; if positive sign, jump to next value
 0000015C  3C 00			cmp		al, 0
 0000015E  74 2E			je		_error ; if nothing entered, retry
 00000160  EB 01			jmp		_firstskip
 00000162			_nextint:
					; validate the input
 00000162  AC				lodsb

 00000163			_firstskip:
 00000163  3C 00			cmp		al, 0 ; check if end of string
 00000165  74 3C			je		_exit
					
 00000167  6B D2 0A			imul	edx, 10 ; multiply by 10 since another value exists after
 0000016A  70 22			jo		_error ; catch overflow error when multiplying 
 0000016C  2C 30			sub		al, 48 ; get the char to a digit

					;check if digit
 0000016E  3C 00			cmp		al, 0 ; check if nessecary, I think i can remove this then since any value should overflow to a larger than 9 value
 00000170  7C 1C			jl		_error
 00000172  3C 09			cmp		al, 9
 00000174  7F 18			jg		_error

 00000176  80 7D FF 01			cmp		isNeg, 1
 0000017A  74 06			je		_sub
 0000017C  03 D0			add		edx, eax ;add to value
 0000017E			_cont:
 0000017E  70 0E			jo		_error ;if overflow while positive, error
 00000180  EB E0			jmp		_nextint

 00000182			_sub: ; if the value is a negative, we subtract it instead of adding
 00000182  2B D0			sub		edx, eax
 00000184  70 08			jo		_error ; catch subtraction overflow
 00000186  EB F6			jmp		_cont

 00000188			_negate:
 00000188  C6 45 FF 01			mov		isNeg, 1
 0000018C  EB D4			jmp		_nextint

 0000018E			_error: ; jump here if error, show message and then go back to retry
					mDisplayString [ebp + 16]
 0000018E  52		     1		push	edx
 0000018F  FC		     1		cld
 00000190  8B 55 10	     1		mov		edx, [ebp + 16]
 00000193  E8 00000000 E     1		call	WriteString
 00000198  5A		     1		pop		edx
 00000199  E8 00000000 E		call	CrLf
 0000019E  E9 FFFFFF7A			jmp		_retry

 000001A3			_exit:
 000001A3  8B 45 08			mov		eax, [ebp + 8]
 000001A6  89 10			mov		[eax], edx ;set the final value to the output parameter
					
 000001A8  59				pop		ecx
 000001A9  58				pop		eax
 000001AA  C9		   *	    leave  
 000001AB  C2 0010			ret		16
 000001AE			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Converts a signed integer to a ASCII Value and prints it to the console
				;
				; Preconditions: none
				;
				; Postconditions: none
				;
				; Receives:
				; [ebp + 12] = address of a buffer string, for parsing the integer
				; [ebp + 8]  = address of the integer to parse and display
				;
				; returns: none
				; ---------------------------------------------------------------------------------

 000001AE			WriteVal PROC
					LOCAL	divisor : DWORD
					LOCAL	isNeg : DWORD

 000001AE  55		   *	    push   ebp
 000001AF  8B EC	   *	    mov    ebp, esp
 000001B1  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 000001B4  C7 45 FC			mov		divisor, 10
	   0000000A
 000001BB  C7 45 F8			mov		isNeg, 0
	   00000000

 000001C2  50				push	eax
 000001C3  51				push	ecx
 000001C4  52				push	edx
 000001C5  8B 75 08			mov		esi, [ebp + 8]
 000001C8  8B 7D 0C			mov		edi, [ebp + 12]
 000001CB  33 C9			xor		ecx, ecx ; clear ecx for counting
 000001CD  33 D2			xor		edx, edx ; clear edx for counting
 000001CF  83 C7 0A			add		edi, 10
 000001D2  FD				std ;set the direction flag so that we move backwards while placing ascii values

 000001D3  B0 00			mov		al, 0 ; add a null terminator
 000001D5  AA				stosb	

 000001D6  8B 04 8E			mov		eax, [esi + ecx * 4]
					
 000001D9  83 F8 00			cmp		eax, 0
 000001DC  7D 09			jge		_convint
 000001DE  F7 D8			neg		eax
 000001E0  C7 45 F8			mov		isNeg, 1
	   00000001

 000001E7			_convint:
 000001E7  99				cdq
 000001E8  F7 7D FC			idiv	divisor ;divide by 10, edx now holds the next value
 000001EB  83 C2 30			add		edx, 48
 000001EE  50				push	eax
 000001EF  8A C2			mov		al, dl
 000001F1  AA				stosb  ; store the value to edi
 000001F2  58				pop		eax
 000001F3  83 F8 00			cmp		eax, 0
 000001F6  75 EF			jne		_convint

 000001F8  83 7D F8 00			cmp		isNeg, 0
 000001FC  74 03			je		_exit
 000001FE  B0 2D			mov		al, '-' ; add the negative sign if negative
 00000200  AA				stosb

 00000201			_exit:
 00000201  8B C7			mov		eax, edi
 00000203  40				inc		eax

					mDisplayString eax
 00000204  52		     1		push	edx
 00000205  FC		     1		cld
 00000206  8B D0	     1		mov		edx, eax
 00000208  E8 00000000 E     1		call	WriteString
 0000020D  5A		     1		pop		edx

 0000020E  5A				pop		edx
 0000020F  59				pop		ecx
 00000210  58				pop		eax
 00000211  C9		   *	    leave  
 00000212  C2 0008			ret		8
 00000215			WriteVal ENDP
					
				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/17/23 22:13:58
%proj6_fahnestd   (proj6_fahnestd.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000015D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000215 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000110 _TEXT	Length= 0000009E Public STDCALL
  isNeg  . . . . . . . . . . . .	Byte	 bp - 00000001
  bytesread  . . . . . . . . . .	DWord	 bp - 00000008
  _retry . . . . . . . . . . . .	L Near	 0000011D _TEXT	
  _nextint . . . . . . . . . . .	L Near	 00000162 _TEXT	
  _firstskip . . . . . . . . . .	L Near	 00000163 _TEXT	
  _cont  . . . . . . . . . . . .	L Near	 0000017E _TEXT	
  _sub . . . . . . . . . . . . .	L Near	 00000182 _TEXT	
  _negate  . . . . . . . . . . .	L Near	 00000188 _TEXT	
  _error . . . . . . . . . . . .	L Near	 0000018E _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 000001A3 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001AE _TEXT	Length= 00000067 Public STDCALL
  divisor  . . . . . . . . . . .	DWord	 bp - 00000004
  isNeg  . . . . . . . . . . . .	DWord	 bp - 00000008
  _convint . . . . . . . . . . .	L Near	 000001E7 _TEXT	
  _exit  . . . . . . . . . . . .	L Near	 00000201 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000110 Public STDCALL
  _nextnum . . . . . . . . . . .	L Near	 00000030 _TEXT	
  _nextval . . . . . . . . . . .	L Near	 00000076 _TEXT	
  _skip  . . . . . . . . . . . .	L Near	 00000083 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFFER_SIZE  . . . . . . . . . .	Number	 0000000Ch   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
asciiconv  . . . . . . . . . . .	Byte	 00000117 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
commastr . . . . . . . . . . . .	Byte	 00000114 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errstr . . . . . . . . . . . . .	Byte	 000000F7 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000002C _DATA	
ints . . . . . . . . . . . . . .	DWord	 0000012D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mean . . . . . . . . . . . . . .	DWord	 00000159 _DATA	
msg1 . . . . . . . . . . . . . .	Byte	 00000080 _DATA	
msg2 . . . . . . . . . . . . . .	Byte	 000000A2 _DATA	
msg3 . . . . . . . . . . . . . .	Byte	 000000B4 _DATA	
outro1 . . . . . . . . . . . . .	Byte	 00000063 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000000DF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sum  . . . . . . . . . . . . . .	DWord	 00000155 _DATA	
userString . . . . . . . . . . .	Byte	 00000121 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
